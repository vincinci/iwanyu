// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  password      String
  role          UserRole  @default(SHOPPER)
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  vendor        Vendor?
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  favorites     Favorite[]
  sessions      Session[]

  @@map("users")
}

// Vendor model
model Vendor {
  id                  String   @id @default(cuid())
  userId              String   @unique
  businessName        String
  businessDescription String?
  businessPhone       String
  businessAddress     String
  isApproved          Boolean  @default(false)
  isVerified          Boolean  @default(false)
  rating              Float    @default(0)
  totalSales          Int      @default(0)
  totalRevenue        Int      @default(0)
  commissionRate      Float    @default(0.05)
  logo                String?
  banner              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  @@map("vendors")
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id                String           @id @default(cuid())
  vendorId          String
  categoryId        String
  name              String
  slug              String           @unique
  description       String
  shortDescription  String?
  sku               String           @unique
  price             Int              // Price in RWF (cents)
  salePrice         Int?             // Sale price in RWF (cents)
  stock             Int              @default(0)
  lowStockThreshold Int              @default(10)
  images            String[]
  weight            Float?
  dimensions        Json?            // {length, width, height}
  isActive          Boolean          @default(true)
  isFeatured        Boolean          @default(false)
  rating            Float            @default(0)
  reviewCount       Int              @default(0)
  tags              String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  vendor    Vendor          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category  Category        @relation(fields: [categoryId], references: [id])
  variants  ProductVariant[]
  reviews   Review[]
  cartItems CartItem[]
  favorites Favorite[]
  orderItems OrderItem[]

  @@map("products")
}

// Product Variant model
model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String
  value     String
  price     Int?    // Price difference in RWF (cents)
  stock     Int?
  sku       String?

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  items CartItem[]

  @@map("carts")
}

// Cart Item model
model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Int     // Price at time of adding to cart in RWF (cents)
  variant   String?

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variant])
  @@map("cart_items")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  userId          String
  vendorId        String
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  paymentId       String?
  subtotal        Int         // Amount in RWF (cents)
  shippingFee     Int         // Amount in RWF (cents)
  tax             Int         // Amount in RWF (cents)
  total           Int         // Amount in RWF (cents)
  currency        String      @default("RWF")
  shippingAddress Json
  billingAddress  Json?
  notes           String?
  trackingNumber  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user   User        @relation(fields: [userId], references: [id])
  vendor Vendor      @relation(fields: [vendorId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

// Order Item model
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int     // Price at time of order in RWF (cents)
  variant   String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Address model
model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String?
  country      String      @default("Rwanda")
  phone        String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Favorite model
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

// Session model for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum UserRole {
  SHOPPER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}
